Usable Python functions:

CDA_order is a python function that will send an order given the number of shares, price per share, direction('B' or 'S'), and duration of time to be in the market.
CDA_order returns the token of the order sent.
def CDA_order(shares: int, price: int, direction: str, time_in_force: int):
    return token

CDA_order_cancel is a python function that will cancel an order given the order token
def CDA_order_cancel(token):

account_info is a python function that will retrieve the client's information as a dictionary containing the keys ["id", "balance", "active_orders", "owned_shares"].
Where "id" is a string, "balance" is an integer, "orders" is a dictionary of the client's active orders, and "owned_shares" is an integer.
The keys of the "orders" dictionary are the tokens of each active order placed by the client. Each key is paired to a dictionary representing the order, which has the keys ["quantity", "price", "direction", "time_in_force", "timestamp"], 
where "quantity" is an integer representing the desired amount of shares to trade, "price" is an integer representing the desired price for the order to trade at, and direction 
(a string of value 'B' or 'S', where 'B' means the order is a buy order and 'S' is a sell order). "timestamp" is an integer representing the time the order was added to the market.
def account_info()
    return {"id" : id, "balance" : balance, "orders" : {order_token_1 : {"quantity": quantity_1, "price": price_1, "direction": 'B' or 'S', "time_in_force": order_1_lifetime, "timestamp": timestamp_1}, order_token_2 : {"quantity": quantity_2, "price": price_2, "direction": 'B' or 'S', "time_in_force": order_2_lifetime, "timestamp": timestamp_1}}, "owned_shares" : owned_shares}

get_client_order_history is a python function that will retrieve the client's order history, for all past orders the client has placed that have been traded.
Returns a list of dictionaries representing each order in the order history. Each dictionary has the following keys dictionary containing the keys ["price", "quantity", "direction", "timestamp"].
Where "price" is the price of the order traded, "quantity" is the number of executed shares, "direction" (which will be set to 'B' for buy orders and 'S' for sell orders), and "timestamp" is the time at which the order was traded in the exchange.
def get_client_order_history()
    return [{"price" : price, "quantity" : quantity, "direction" : direction, "timestamp": timestamp}]

get_book_history is a python function that will retrieve the market book history, including the most recent history, as a list of dictionaries. 
The most recent book data will be located at the 0th index; whereas, the oldest book data can be accessed at the largest largest index or the -1 index. 
Each dictionaries at each indice of the data contains the keys ["timestamp", "bids", "asks"]. Where timestamp is a string, bids is a dictionary of buy orders, and asks is a dictionary of sell orders. 
An example of bids looks like: "bids": [{"price": 13, "quantity": 120}, {"price": 5, "quantity": 64}, {"price": 3, "quantity": 594}] where each entry is sorted by price
in descending order. 
An example of asks looks like: "asks": [{"price": 9, "quantity": 13}, {"price": 39, "quantity": 99}, {"price": 94, "quantity": 85}] where each entry is sorted by price
in ascending order. 
Here is an example of how to call the function and what the general structure looks like.
def get_book_history():
    return [{'timestamp': 51287183613000, 'book': {'bids': [{'price': 7, 'quantity': 120}], 'asks': []}}, 
            {'timestamp': 51279084953000, 'book': {'bids': [{'price': 7, 'quantity': 90}], 'asks': [{"price": 9, "quantity": 13}]}}, 
            {'timestamp': 51270996375000, 'book': {'bids': [{'price': 7, 'quantity': 60}], 'asks': [{"price": 9, "quantity": 13}, {"price": 39, "quantity": 99}]}}, 
            {'timestamp': 51262883790000, 'book': {'bids': [{'price': 7, 'quantity': 30}], 'asks': [{"price": 9, "quantity": 13}, {"price": 39, "quantity": 99}, {"price": 94, "quantity": 85}]}}] 

get_transaction_history is a python function that will retrieve the market transaction history, including the most recent history, as a list of dictionaries.
The most recent transaction that took place in the market will be located at the 0th index; whereas, the first transaction to take place will be located at the largest index or the -1 index.
Each dictionaries at each indice of the data contains the keys ["timestamp", "transaction"]. Where "timestamp" is a string, and "transaction" is a dictionary of the transaction information.
An example of "transaction" looks like: "transaction": ["token": b'add197e47cf942b2a71242ef33bfc863', "shares": 4, "price": 5], where "token" is the transacted order token, "shares" is the number of transacted shares, and "price" is the price of the executed transaction.
Here is an example of how to call the function and what the general structure looks like.
get_transaction_history()

get_account_history is a python function that will retrieve the client's account information history, including the most recent account information, as a list of dictionaries.
The client's most recent account information will be located at the 0th index; whereas, the client's initial account information will be located at the largest index or the -1 index.
Each dictionaries at each indice of the data contains the keys ["timestamp", "state"]. Where "timestamp" is a string, and "state" is a dictionary of the client account information.
In the "state" dictionary, there are the following keys ["id", "balance", "orders", "owned_shares"]. Where id is a string, balance is an integer, active_orders is a dictionary, and owned_shares is an integer.
Here is an example of how to call the function and what the general structure looks like.
def get_account_history():
    return [{"timestamp": 45840969198000, "state": {"id": "cce63b8c9a80480ebd2887effdc675b9", "balance": 1000, "orders": {}, "owned_shares": 50}},
            {"timestamp": 45854054341000, "state": {"id": "cce63b8c9a80480ebd2887effdc675b9", "balance": 1000, "orders": {"94b9f470e76b4165abcc0386f7cf0333": [5, 0, "B"]}, "owned_shares": 50}},
            {"timestamp": 45873094690000, "state": {"id": "cce63b8c9a80480ebd2887effdc675b9", "balance": 996, "orders": {"c673a04553f4421e9ea9e4bdc5cca5f7": [2, 2, "B"], "3c9f1d808d5e432cbfb40013066550f3": [3, 0, "B"]}, "owned_shares": 50}},
            {"timestamp": 45877702871000, "state": {"id": "cce63b8c9a80480ebd2887effdc675b9", "balance": 1000, "orders": {"c673a04553f4421e9ea9e4bdc5cca5f7": [2, 0, "B"]}, "owned_shares": 50}}]

def get_current_time is a python function that will return an integer representing the current time in nanoseconds and can be used to compare the the timestamp of orders to calculate how long an order has been in the market.